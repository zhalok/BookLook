import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { styled } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Grid from '@mui/material/Grid';
import BookCard from '../components/Cards/BookCard';
import { useEffect } from 'react';
// require("../queries/create-table-books.sql")

export default function Home({ Message, Books }) {
	console.log(Books);
	const Item = styled(Paper)(({ theme }) => ({
		...theme.typography.body2,
		padding: theme.spacing(1),
		textAlign: 'center',
		color: theme.palette.text.secondary,
	}));
	if (Message) {
		return <div>Connected</div>;
	}
	useEffect(() => {
		document.body.style.backgroundColor = '#bdc3ec';
	}, []);
	return (
		<div className={styles.container} style={{}}>
			<Head>
				<title>Book Look</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<div>
				<h1 style={{ textAlign: 'center' }}>Book Look</h1>
			</div>
			<div>Search</div>
			<div style={{ marginTop: '40px' }}>
				<Grid container spacing={2}>
					<Grid item xs={3}>
						<Item style={{ color: 'black', border: '1px solid black' }}>
							Filter
						</Item>
					</Grid>
					<Grid item xs={8}>
						<Item style={{ color: 'black', border: '1px solid black' }}>
							<h1>Books</h1>
							<Grid
								container
								spacing={2}
								style={{
									marginTop: '20px',
									marginBottom: '50px',
									padding: '20px',
								}}
							>
								{Books.map((e, index) => (
									<Grid key={index} item xs={4} style={{ marginTop: '20px' }}>
										<BookCard info={e} />
									</Grid>
								))}
							</Grid>
						</Item>
					</Grid>
				</Grid>
			</div>
		</div>
	);
}
export async function getServerSideProps({ req, res }) {
	const mysqlClient = require('../utils/database_connection');
	const promise = new Promise((resolve, reject) => {
		mysqlClient.query('select * from books', (error, result, fields) => {
			if (error) {
				reject(error);
			} else {
				resolve(result);
			}
		});
	});
	const result = await promise;
	// console.log(result);
	const _result = [];
	for (let i = 0; i < result.length; i++) {
		let _res = JSON.stringify(result[i]);
		_res = JSON.parse(_res);
		_result.push(_res);
	}
	// console.log(_result);

	return {
		props: {
			Books: _result,
		},
	};
}
